@page "/history"
@using HamsterWarsV2.Client.Components
@using HamsterWarsV2.Client.HttpRepository.MatchHttp
@inject IMatchHttpRepository MatchRepository
@inject NavigationManager NavigationManager

@if (MatchList == null || MatchList.Count == 0)
{
    <span>Loading all matches...</span>
}
else
{
    @foreach (var match in MatchList)
    {
        <table class="table">
            <thead>
                <tr>@match.Id</tr>
            </thead>
            <tbody>
                <tr>@match.WinnerId</tr>
                <tr>@match.LoserId</tr>
                <button class="btn btn-success" @onclick="@(() => MatchDetails(@match.Id))">
                    More details
                </button>
            </tbody>
        </table>
    }
}

@code {

    [Parameter]
    public EventCallback<List<MatchDto>> ResetList { get; set; }
    private List<MatchDto> MatchList = new List<MatchDto>();

    protected override async Task OnInitializedAsync()
    {
        MatchList = await MatchRepository.GetMatches();
    }

    async void DeleteMatch(int id)
    {
        //TODO Den laddar inte om korrekt efter bortaggning av match. Delete fungerar.
        //Gör ny Vy för match ?
        await MatchRepository.DeleteMatch(id);
        ResetBattle();
    }

    void MatchDetails(int matchId)
    {
        NavigationManager.NavigateTo($"matches/{matchId}");
    }

    async void ResetBattle()
    {
        MatchList = new List<MatchDto>();
        await ResetList.InvokeAsync(await MatchRepository.GetMatches());
    }
}
