@page "/history"
@using HamsterWarsV2.Client.Components
@using HamsterWarsV2.Client.HttpRepository.MatchHttp
@inject IMatchHttpRepository MatchRepository
@inject NavigationManager NavigationManager

@if (MatchList == null || MatchList.Count == 0)
{
    <span>Loading all matches...</span>
}
else
{
    @foreach (var match in MatchList)
    {
        <th>ID</th>
        <th>Winner</th>
        <th>Loser</th>
        <td>@match.Id</td>
        <td>@match.WinnerId</td>
        <td>@match.LoserId</td>
        <td type="button" class="btn btn-warning" @onclick="@(() => DeleteMatch(@match.Id))">
            Delete Match
        </td>
    }
}

@code {

    [Parameter]
    public EventCallback<List<MatchDto>> ResetList { get; set; }
    private List<MatchDto> MatchList = new List<MatchDto>();

    protected override async Task OnInitializedAsync()
    {
        MatchList = await MatchRepository.GetMatches();
    }

    async void DeleteMatch(int id)
    {
        //TODO Den laddar inte om korrekt efter bortaggning av match. Delete fungerar.
        //Gör ny Vy för match ?
        await MatchRepository.DeleteMatch(id);
        ResetBattle();
    }

    async void ResetBattle()
    {
        MatchList = new List<MatchDto>();
        await ResetList.InvokeAsync(await MatchRepository.GetMatches());
    }
}
