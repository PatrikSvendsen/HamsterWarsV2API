@page "/history"
@using HamsterWarsV2.Client.Components
@using HamsterWarsV2.Client.HttpRepository.MatchHttp
@inject IMatchHttpRepository MatchRepository
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider

@if (MatchList == null || MatchList.Count == 0)
{
    <span>Loading all matches...</span>
}
else
{
    @foreach (var match in MatchList)
    {
        <div class="wrapper">
            <div class="box">Match Id: @match.Id</div>
            <div class="box">Match Winner: @match.WinnerId</div>
            <div class="box">Match Loser: @match.LoserId</div>
            <div class="box">Timestamp: @match.TimeStamp</div>
            <div>
                <AuthorizeView>
                    <Authorized>
                        <button class="btn btn-success" @onclick="@(() => MatchDetails(@match.Id))">
                            More details
                        </button>
                    </Authorized>
                </AuthorizeView>
            </div>
        </div>
    }
}

@code {

    [Parameter]
    public EventCallback<List<MatchDto>> ResetList { get; set; }
    private List<MatchDto> MatchList = new List<MatchDto>();

    protected override async Task OnInitializedAsync()
    {
        MatchList = await MatchRepository.GetMatches();
    }

    void MatchDetails(int matchId)
    {
        NavigationManager.NavigateTo($"matches/{matchId}");
    }

    async void ResetBattle()
    {
        MatchList = new List<MatchDto>();
        await ResetList.InvokeAsync(await MatchRepository.GetMatches());
    }
}
