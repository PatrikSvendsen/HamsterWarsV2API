@page "/hamsters/{id:int}"
@page "/matchwinners/{id:int}"
@using HamsterWarsV2.Client.Components
@using HamsterWarsV2.Client.HttpRepository.HamsterHttp
@using HamsterWarsV2.Client.HttpRepository.MatchHttp
@inject IHamsterHttpRepository HamsterRepository
@inject IMatchHttpRepository MatchRepository
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider

@if (Hamster is null)
{
    <span>@message</span>
}
else
{
    <WrapperContainerBattleComponent>
        <CardGalleryComponent Heading="@Hamster.Name" Source="@Hamster.ImgName">
            <p>
                Age: @Hamster.Age<br />
                Loves: @Hamster.Loves<br />
                Favourite food: @Hamster.FavFood<br />
                Games played: @Hamster.Games<br />
                Games won: @Hamster.Wins<br />
                Totalt defeats: @Hamster.Defeats
            </p>
        </CardGalleryComponent>
    </WrapperContainerBattleComponent>
    <WrapperContainerBattleComponent>
        <AuthorizeView>
            <Authorized>
                <button class="btn btn-danger float-start" @onclick="DeleteHamster">
                    Delete Hamster
                </button>
            </Authorized>
        </AuthorizeView>
    </WrapperContainerBattleComponent>
}

<WrapperContainerBattleComponent>
    @if (Matches == null || Matches.Count == 0)
    {
        <br />
        <span>@matchesMessage</span>
    }
    else
    {
        @foreach (var match in Matches)
        {
            <div class="wrapper">
                <div class="box">Match Id: @match.Id</div>
                <div class="box">Match Winner: @match.WinnerId</div>
                <div class="box">Match Loser: @match.LoserId</div>
                <div class="box">Timestamp: @match.TimeStamp</div>
            </div>
        }
    }
</WrapperContainerBattleComponent>

@code {

    private HamsterDto? Hamster { get; set; } = null;
    private List<MatchDto>? Matches { get; set; } = new List<MatchDto>();
    private string message = string.Empty;
    private string matchesMessage = string.Empty;

    [Parameter]
    public int Id { get; set; }

    protected async override Task OnInitializedAsync()
    {
        Hamster = await HamsterRepository.GetHamster(Id);
        LoadMatches();
    }

    async void DeleteHamster()
    {
        await HamsterRepository.DeleteHamster(Hamster.Id);
        NavigationManager.NavigateTo("/gallery");
    }

    async void LoadMatches()
    {
        Matches = await MatchRepository.GetHamsterMatches(Id);
        if (Matches.Count() is 0)
        {
            matchesMessage = "No matches found";
        }
        StateHasChanged();
    }
}
