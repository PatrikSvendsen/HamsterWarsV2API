@page "/hamsters/{id:int}"
@page "/matchwinners/{id:int}"
@using HamsterWarsV2.Client.Components
@using HamsterWarsV2.Client.HttpRepository.HamsterHttp
@using HamsterWarsV2.Client.HttpRepository.MatchHttp
@inject IHamsterHttpRepository HamsterRepository
@inject IMatchHttpRepository MatchRepository
@inject NavigationManager NavigationManager

@if (Hamster == null)
{
    <span>@message</span>
}
else
{
    <WrapperContainerBattleComponent>
        <CardGalleryComponent Heading="@Hamster.Name" Source="@Hamster.ImgName">
            <p>
                Age: @Hamster.Age<br />
                Loves: @Hamster.Loves<br />
                Favourite food: @Hamster.FavFood<br />
                Games played: @Hamster.Games<br />
                Games won: @Hamster.Wins<br />
                Totalt defeats: @Hamster.Defeats
            </p>
        </CardGalleryComponent>
    </WrapperContainerBattleComponent>

    <button class="btn btn-danger float-start" @onclick="DeleteHamster">
        Delete Hamster
    </button>
}
<WrapperContainerBattleComponent>
    @if (Matches == null || Matches.Count == 0)
    {
        <br />

        <span>Loading all matches...</span>
    }
    else
    {
        @foreach(var match in Matches)
        {
            <th>Match Id: </th><td>@match.Id</td><br />
            <th>Hamster Id:</th><td>@match.WinnerId</td><br />
            <th>Defeated:</th> <td>@match.LoserId</td><br />
        }
    }
</WrapperContainerBattleComponent>

@code {

    private HamsterDto? Hamster { get; set; } = null;
    private List<MatchDto>? Matches { get; set; } = new List<MatchDto>();
    private string message = string.Empty;

    [Parameter]
    public int Id { get; set; }

    protected async override Task OnInitializedAsync()
    {
        Hamster = await HamsterRepository.GetHamster(Id);
        Matches = await MatchRepository.GetHamsterMatches(Id);
    }

    async void DeleteHamster()
    {
        await HamsterRepository.DeleteHamster(Hamster.Id);
        NavigationManager.NavigateTo("/gallery");
    }
}
