@page "/login"
@using Blazored.LocalStorage
@using HamsterWarsV2.Client.HttpRepository.AuthHttp
@inject IAuthHttpRepository AuthHttpRepository
@inject ILocalStorageService LocalStorage
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider

<PageTitle>Login</PageTitle>

<h3>Login</h3>

<EditForm Model="user" OnValidSubmit="HandleLogin">
    <DataAnnotationsValidator />
    <div class="mb-3">
        <label for="email">Email</label>
        <InputText id="email" @bind-Value="user.Email" class="form-control"></InputText>
        <ValidationMessage For="@(() => user.Email)" />
    </div>
    <div class="mb-3">
        <label for="password">Password</label>
        <InputText id="password" @bind-Value="user.Password" class="form-control" type="password"></InputText>
        <ValidationMessage For="@(() => user.Password)" />
    </div>
    <button type="submit" class="btn btn-primary">Login</button>
</EditForm>
<div class="text-danger">
    <span>@errorMessage</span>
</div>


@code {
    private UserLoginDto user = new UserLoginDto();

    private string errorMessage = string.Empty;

    private async Task HandleLogin()
    {
        var result = await AuthHttpRepository.LoginUser(user);

        errorMessage = string.Empty;
        await LocalStorage.SetItemAsync("authToken", result);
        await AuthenticationStateProvider.GetAuthenticationStateAsync();
        NavigationManager.NavigateTo("");

    }

}